// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDD_TDD_IN_ONE.BDD
{
    using System;
    using System.Linq;
    using TechTalk.SpecFlow;
    using NUnit.Framework;
    using System.Collections.Generic;
    using OpenQA.Selenium;
    using OpenQA.Selenium.Chrome;
    using OpenQA.Selenium.Support.UI;
    using OpenQA.Selenium.Remote;


    [Binding]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Login Action", SourceFile="BDD\\BrowserTest.feature", SourceLine=0)]
    public partial class LoginActionFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        public static IWebDriver driver = null; // singletondriver.driver;        

#line 1 "BrowserTest.feature"
#line hidden

        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Login Action", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Successful Login with Valid Credentials and Logout", SourceLine=2)]
        public virtual void SuccessfulLoginWithValidCredentialsAndLogout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful Login with Valid Credentials and Logout", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
 testRunner.Given("User is on \"http://www.store.demoqa.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 5
 testRunner.When("User Navigate to LogIn Page \"http://store.demoqa.com/products-page/your-account/\"" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 6
 testRunner.And("User enters UserName and Password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.Then("Message displayed Login Successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 8
 testRunner.When("User LogOut from the Application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("Message displayed LogOut Successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }


        
        [Given(@"User is on ""(.*)""")]
        public void GivenUserIsOn(string p0)
        {
            driver = new ChromeDriver();
            driver.Url = p0;
            driver.Manage().Cookies.DeleteAllCookies();
            driver.Manage().Window.Maximize();//full screen
            LoginActionFeature.driver = driver;

        }

        [When(@"User Navigate to LogIn Page ""(.*)""")]
        public void WhenUserNavigateToLogInPage(string p0)
        {
            // Find the element that's ID attribute is 'account'(My Account) 
            driver.FindElement(By.XPath(".//*[@id='account']/a")).Click();

        }

        [When(@"User enters UserName and Password")]
        public void WhenUserEntersUserNameAndPassword()
        {
            // Find the element that's ID attribute is 'log' (Username)
            // Enter Username on the element found by above desc.
            driver.FindElement(By.Id("log")).SendKeys("demo-user-shay");
            // Find the element that's ID attribute is 'pwd' (Password)
            // Enter Password on the element found by the above desc.
            driver.FindElement(By.Id("pwd")).SendKeys("demo-user-shay");

            // Now submit the form.
            driver.FindElement(By.Id("login")).Click();

        }

        [Then(@"Message displayed Login Successfully")]
        public void ThenMessageDisplayedLoginSuccessfully()
        {            
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(30));
            IWebElement element = wait.Until(driver => driver.FindElement(By.ClassName("display-name")));

            Assert.IsNotNull(driver);
            Assert.AreEqual("demo-user-shay", element.Text);
            Console.WriteLine(element.Text);


        }

        [When(@"User LogOut from the Application")]
        public void WhenUserLogOutFromTheApplication()
        {

            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(10));
            IWebElement element = wait.Until(driver => driver.FindElement(By.Id("account_logout")));
            
            if (element != null)
            {
                element.Click();
                
            }          

        }



        [Then(@"Message displayed LogOut Successfully")]
        public void ThenMessageDisplayedLogOutSuccessfully()
        {
            WebDriverWait wait = new WebDriverWait(driver, TimeSpan.FromSeconds(20));
            IWebElement element = wait.Until(driver => driver.FindElement(By.XPath(".//*[@id='account']/a")));

            if (element != null)
            {
               Console.WriteLine("Logout Successfull");

            }else
            {
                Console.WriteLine("Logout Not Successfull");
            }
            //.text "	You are now logged out."
        }

    }
}
#pragma warning restore
#endregion
